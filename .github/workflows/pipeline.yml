name: ASF API CI/CD Pipeline

permissions:
  contents: write
  pull-requests: write

on:
  push:
    branches: [development, staging, master]
  pull_request:
    branches: [development, staging, master]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "development"
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  test_and_security_scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"

      - name: Starting pre-build checks
        uses: slackapi/slack-github-action@v2.0.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ secrets.SLACK_CHANNEL_ID }}
            text: "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
            blocks:
              - type: "section"
              text:
                type: "mrkdwn"
                text: "Starting pre-build checks: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}

      - name: Install dependencies
        run: npm i

      - name: Lint code
        run: npm i
        if: success()

      #   - name: Run unit tests
      #     run: npm run test

      #   - name: Check code coverage
      #     run: npm run coverage

      #   - name: Security scan
      #     run: npm run security-scan

      # - name: Upload artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: build-artifacts
      #     path: |
      #       dist/
      #       coverage/
      #   if: success()

      - name: Finished pre-build checks
        uses: slackapi/slack-github-action@v2.0.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ secrets.SLACK_CHANNEL_ID }}
            text: "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
            blocks:
              - type: "section"
              text:
                type: "mrkdwn"
                text: "Finished pre-build checks: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}

  deploy_to_development:
    needs: test_and_security_scan
    if: github.ref == 'refs/heads/development' && success()
    runs-on: ubuntu-latest
    environment:
      name: development
      url: https://development.atlanticseafood.app
    steps:
      - uses: slackapi/slack-github-action@v1.24.0
      - uses: actions/checkout@v3

      - name: Starting to build for Fly.io development
        uses: slackapi/slack-github-action@v2.0.0

        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ secrets.SLACK_CHANNEL_ID }}
            text: "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
            blocks:
              - type: "section"
              text:
                type: "mrkdwn"
                text: "Starting to build for Fly.io development: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}

      - name: Deploy development Fly.io
        run: |
          export FLYCTL_INSTALL="/home/runner/.fly"
          curl -L https://fly.io/install.sh | sh
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          echo "PATH=$PATH" >> $GITHUB_ENV
          fly deploy -c fly-dev.toml -a asf-integration-layer-dev
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_AUTH_TOKEN }}
        if: success()

      - name: Finished deploying to Fly.io development
        uses: slackapi/slack-github-action@v2.0.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ secrets.SLACK_CHANNEL_ID }}
            text: "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
            blocks:
              - type: "section"
              text:
                type: "mrkdwn"
                text: "Finished deploying to Fly.io development: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}

  request_staging_deployment:
    needs: deploy_to_development
    if: github.ref == 'refs/heads/development' && success()
    runs-on: ubuntu-latest

    steps:
      - name: Creating PR for Staging
        uses: slackapi/slack-github-action@v2.0.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ secrets.SLACK_CHANNEL_ID }}
            text: "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
            blocks:
              - type: "section"
              text:
                type: "mrkdwn"
                text: "Creating PR for Staging: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}

      - name: Create deployment request
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Deploy to Staging',
              body: 'This PR was automatically created by the GitHub Action workflow. Merge to deploy to staging.',
              head: 'development',
              base: 'staging'
            });
            console.log(`Created PR #${pr.number}`);
            if: success()

      - name: Created PR for Staging
        uses: slackapi/slack-github-action@v2.0.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ secrets.SLACK_CHANNEL_ID }}
            text: "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
            blocks:
              - type: "section"
              text:
                type: "mrkdwn"
                text: "Created PR for Staging: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}

  deploy_to_staging:
    if: github.ref == 'refs/heads/staging' && success()
    needs: test_and_security_scan
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging.atlanticseafood.app
    steps:
      - uses: actions/checkout@v3

      - name: Starting to deploy for Fly.io staging
        uses: slackapi/slack-github-action@v2.0.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ secrets.SLACK_CHANNEL_ID }}
            text: "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
            blocks:
              - type: "section"
              text:
                type: "mrkdwn"
                text: "Started deploying to Fly.io staging: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm i

      - name: Deploy to Fly.io Staging
        run: |
          export FLYCTL_INSTALL="/home/runner/.fly"
          curl -L https://fly.io/install.sh | sh
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          echo "PATH=$PATH" >> $GITHUB_ENV
          fly deploy -c fly-staging.toml -a asf-integration-layer-staging

      - name: Finished deploying to Fly.io staging
        uses: slackapi/slack-github-action@v2.0.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ secrets.SLACK_CHANNEL_ID }}
            text: "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
            blocks:
              - type: "section"
              text:
                type: "mrkdwn"
                text: "Finished deploying to Fly.io staging: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}

  request_production_deployment:
    needs: deploy_to_staging
    if: github.ref == 'refs/heads/staging' && success()
    runs-on: ubuntu-latest
    steps:
      - name: Creating PR for Production
        uses: slackapi/slack-github-action@v2.0.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ secrets.SLACK_CHANNEL_ID }}
            text: "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
            blocks:
              - type: "section"
              text:
                type: "mrkdwn"
                text: "Creating PR for Production: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}

      - name: Create deployment pull request
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Deploy to Production',
              body: 'This PR was automatically created by the GitHub Action workflow. Merge to deploy to production.',
              head: 'staging',
              base: 'master'
            });
            console.log(`Created PR #${pr.number}`);
            if: success()

      - name: Created PR for Production
        uses: slackapi/slack-github-action@v2.0.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ secrets.SLACK_CHANNEL_ID }}
            text: "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
            blocks:
              - type: "section"
              text:
                type: "mrkdwn"
                text: "Created PR for production: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}

  deploy_to_production:
    if: github.ref == 'refs/heads/master' && success()
    needs: test_and_security_scan
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://crm-web-nine.vercel.app
    steps:
      - uses: actions/checkout@v3

      - name: Started deploying to Fly.io production
        uses: slackapi/slack-github-action@v2.0.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ secrets.SLACK_CHANNEL_ID }}
            text: "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
            blocks:
              - type: "section"
              text:
                type: "mrkdwn"
                text: "Started deploying to Fly.io production: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm i

      - name: Deploy to production
        run: |
          export FLYCTL_INSTALL="/home/runner/.fly"
          curl -L https://fly.io/install.sh | sh
          export PATH="$FLYCTL_INSTALL/bin:$PATH"
          echo "PATH=$PATH" >> $GITHUB_ENV
          fly deploy -c fly.toml -a asf-integration-layer

      - name: Finished deploying to Fly.io production
        uses: slackapi/slack-github-action@v2.0.0
        with:
          method: chat.postMessage
          token: ${{ secrets.SLACK_BOT_TOKEN }}
          payload: |
            channel: ${{ secrets.SLACK_CHANNEL_ID }}
            text: "GitHub Action build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
            blocks:
              - type: "section"
              text:
                type: "mrkdwn"
                text: "Finished deploying to Fly.io production: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
